// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2019.1
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="fft,hls_ip_2019_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020-clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.399750,HLS_SYN_LAT=266,HLS_SYN_TPT=none,HLS_SYN_MEM=8,HLS_SYN_DSP=20,HLS_SYN_FF=2708,HLS_SYN_LUT=4539,HLS_VERSION=2019_1}" *)

module fft (
        ap_clk,
        ap_rst_n,
        input_vector_TDATA,
        input_vector_TVALID,
        input_vector_TREADY,
        input_vector_TLAST,
        output_vector_TDATA,
        output_vector_TVALID,
        output_vector_TREADY,
        output_vector_TLAST
);

parameter    ap_ST_fsm_state1 = 55'd1;
parameter    ap_ST_fsm_state2 = 55'd2;
parameter    ap_ST_fsm_state3 = 55'd4;
parameter    ap_ST_fsm_state4 = 55'd8;
parameter    ap_ST_fsm_state5 = 55'd16;
parameter    ap_ST_fsm_state6 = 55'd32;
parameter    ap_ST_fsm_state7 = 55'd64;
parameter    ap_ST_fsm_state8 = 55'd128;
parameter    ap_ST_fsm_state9 = 55'd256;
parameter    ap_ST_fsm_state10 = 55'd512;
parameter    ap_ST_fsm_state11 = 55'd1024;
parameter    ap_ST_fsm_state12 = 55'd2048;
parameter    ap_ST_fsm_state13 = 55'd4096;
parameter    ap_ST_fsm_state14 = 55'd8192;
parameter    ap_ST_fsm_state15 = 55'd16384;
parameter    ap_ST_fsm_state16 = 55'd32768;
parameter    ap_ST_fsm_state17 = 55'd65536;
parameter    ap_ST_fsm_state18 = 55'd131072;
parameter    ap_ST_fsm_state19 = 55'd262144;
parameter    ap_ST_fsm_state20 = 55'd524288;
parameter    ap_ST_fsm_state21 = 55'd1048576;
parameter    ap_ST_fsm_state22 = 55'd2097152;
parameter    ap_ST_fsm_state23 = 55'd4194304;
parameter    ap_ST_fsm_state24 = 55'd8388608;
parameter    ap_ST_fsm_state25 = 55'd16777216;
parameter    ap_ST_fsm_state26 = 55'd33554432;
parameter    ap_ST_fsm_state27 = 55'd67108864;
parameter    ap_ST_fsm_state28 = 55'd134217728;
parameter    ap_ST_fsm_state29 = 55'd268435456;
parameter    ap_ST_fsm_state30 = 55'd536870912;
parameter    ap_ST_fsm_state31 = 55'd1073741824;
parameter    ap_ST_fsm_state32 = 55'd2147483648;
parameter    ap_ST_fsm_state33 = 55'd4294967296;
parameter    ap_ST_fsm_state34 = 55'd8589934592;
parameter    ap_ST_fsm_state35 = 55'd17179869184;
parameter    ap_ST_fsm_state36 = 55'd34359738368;
parameter    ap_ST_fsm_state37 = 55'd68719476736;
parameter    ap_ST_fsm_state38 = 55'd137438953472;
parameter    ap_ST_fsm_state39 = 55'd274877906944;
parameter    ap_ST_fsm_state40 = 55'd549755813888;
parameter    ap_ST_fsm_state41 = 55'd1099511627776;
parameter    ap_ST_fsm_state42 = 55'd2199023255552;
parameter    ap_ST_fsm_state43 = 55'd4398046511104;
parameter    ap_ST_fsm_state44 = 55'd8796093022208;
parameter    ap_ST_fsm_state45 = 55'd17592186044416;
parameter    ap_ST_fsm_state46 = 55'd35184372088832;
parameter    ap_ST_fsm_state47 = 55'd70368744177664;
parameter    ap_ST_fsm_state48 = 55'd140737488355328;
parameter    ap_ST_fsm_state49 = 55'd281474976710656;
parameter    ap_ST_fsm_state50 = 55'd562949953421312;
parameter    ap_ST_fsm_state51 = 55'd1125899906842624;
parameter    ap_ST_fsm_state52 = 55'd2251799813685248;
parameter    ap_ST_fsm_state53 = 55'd4503599627370496;
parameter    ap_ST_fsm_state54 = 55'd9007199254740992;
parameter    ap_ST_fsm_state55 = 55'd18014398509481984;

input   ap_clk;
input   ap_rst_n;
input  [63:0] input_vector_TDATA;
input   input_vector_TVALID;
output   input_vector_TREADY;
input  [0:0] input_vector_TLAST;
output  [63:0] output_vector_TDATA;
output   output_vector_TVALID;
input   output_vector_TREADY;
output  [0:0] output_vector_TLAST;

 reg    ap_rst_n_inv;
reg   [63:0] input_vector_V_data_V_0_data_out;
wire    input_vector_V_data_V_0_vld_in;
wire    input_vector_V_data_V_0_vld_out;
wire    input_vector_V_data_V_0_ack_in;
reg    input_vector_V_data_V_0_ack_out;
reg   [63:0] input_vector_V_data_V_0_payload_A;
reg   [63:0] input_vector_V_data_V_0_payload_B;
reg    input_vector_V_data_V_0_sel_rd;
reg    input_vector_V_data_V_0_sel_wr;
wire    input_vector_V_data_V_0_sel;
wire    input_vector_V_data_V_0_load_A;
wire    input_vector_V_data_V_0_load_B;
reg   [1:0] input_vector_V_data_V_0_state;
wire    input_vector_V_data_V_0_state_cmp_full;
reg   [0:0] input_vector_V_last_V_0_data_out;
wire    input_vector_V_last_V_0_vld_in;
wire    input_vector_V_last_V_0_vld_out;
wire    input_vector_V_last_V_0_ack_in;
reg    input_vector_V_last_V_0_ack_out;
reg   [0:0] input_vector_V_last_V_0_payload_A;
reg   [0:0] input_vector_V_last_V_0_payload_B;
reg    input_vector_V_last_V_0_sel_rd;
reg    input_vector_V_last_V_0_sel_wr;
wire    input_vector_V_last_V_0_sel;
wire    input_vector_V_last_V_0_load_A;
wire    input_vector_V_last_V_0_load_B;
reg   [1:0] input_vector_V_last_V_0_state;
wire    input_vector_V_last_V_0_state_cmp_full;
reg   [63:0] output_vector_V_data_V_1_data_out;
reg    output_vector_V_data_V_1_vld_in;
wire    output_vector_V_data_V_1_vld_out;
wire    output_vector_V_data_V_1_ack_in;
wire    output_vector_V_data_V_1_ack_out;
reg   [63:0] output_vector_V_data_V_1_payload_A;
reg   [63:0] output_vector_V_data_V_1_payload_B;
reg    output_vector_V_data_V_1_sel_rd;
reg    output_vector_V_data_V_1_sel_wr;
wire    output_vector_V_data_V_1_sel;
wire    output_vector_V_data_V_1_load_A;
wire    output_vector_V_data_V_1_load_B;
reg   [1:0] output_vector_V_data_V_1_state;
wire    output_vector_V_data_V_1_state_cmp_full;
reg   [0:0] output_vector_V_last_V_1_data_out;
reg    output_vector_V_last_V_1_vld_in;
wire    output_vector_V_last_V_1_vld_out;
wire    output_vector_V_last_V_1_ack_in;
wire    output_vector_V_last_V_1_ack_out;
reg   [0:0] output_vector_V_last_V_1_payload_A;
reg   [0:0] output_vector_V_last_V_1_payload_B;
reg    output_vector_V_last_V_1_sel_rd;
reg    output_vector_V_last_V_1_sel_wr;
wire    output_vector_V_last_V_1_sel;
wire    output_vector_V_last_V_1_load_A;
wire    output_vector_V_last_V_1_load_B;
reg   [1:0] output_vector_V_last_V_1_state;
wire    output_vector_V_last_V_1_state_cmp_full;
wire   [2:0] rev8_address0;
reg    rev8_ce0;
wire   [2:0] rev8_q0;
reg    input_vector_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [54:0] ap_CS_fsm;
wire    ap_CS_fsm_state5;
wire   [0:0] icmp_ln28_fu_872_p2;
reg    output_vector_TDATA_blk_n;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire   [31:0] grp_fu_692_p2;
reg   [31:0] reg_732;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state51;
wire   [31:0] grp_fu_696_p2;
reg   [31:0] reg_741;
wire   [31:0] grp_fu_700_p2;
reg   [31:0] reg_750;
wire   [31:0] grp_fu_704_p2;
reg   [31:0] reg_757;
wire   [31:0] temp1_M_real_q1;
reg   [31:0] reg_764;
wire    ap_CS_fsm_state21;
wire   [31:0] temp1_M_real_q0;
wire   [31:0] temp1_M_imag_q1;
reg   [31:0] reg_773;
wire   [31:0] temp1_M_imag_q0;
wire   [31:0] grp_fu_708_p2;
reg   [31:0] reg_782;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state41;
wire   [31:0] grp_fu_713_p2;
reg   [31:0] reg_787;
wire   [31:0] grp_fu_718_p2;
reg   [31:0] reg_792;
wire   [31:0] grp_fu_723_p2;
reg   [31:0] reg_797;
wire   [31:0] temp2_M_real_q0;
reg   [31:0] reg_802;
wire    ap_CS_fsm_state38;
wire   [31:0] temp2_M_imag_q0;
reg   [31:0] reg_810;
wire   [2:0] add_ln22_fu_818_p2;
wire    ap_CS_fsm_state2;
wire   [2:0] add_ln23_fu_836_p2;
wire    ap_CS_fsm_state3;
wire   [2:0] add_ln24_fu_854_p2;
wire    ap_CS_fsm_state4;
wire   [3:0] i_fu_878_p2;
reg    ap_block_state5;
wire   [3:0] i_1_fu_940_p2;
reg   [3:0] i_1_reg_1276;
wire    ap_CS_fsm_state6;
wire   [63:0] zext_ln60_fu_946_p1;
reg   [63:0] zext_ln60_reg_1281;
wire   [0:0] icmp_ln58_fu_934_p2;
wire    ap_CS_fsm_state7;
wire   [2:0] add_ln63_fu_957_p2;
wire    ap_CS_fsm_state9;
wire   [2:0] add_ln64_fu_975_p2;
wire    ap_CS_fsm_state10;
wire   [63:0] zext_ln69_fu_1001_p1;
reg   [63:0] zext_ln69_reg_1321;
wire    ap_CS_fsm_state11;
wire   [0:0] tmp_1_fu_993_p3;
wire   [63:0] zext_ln69_1_fu_1017_p1;
reg   [63:0] zext_ln69_1_reg_1337;
wire   [3:0] i_2_fu_1023_p2;
reg   [3:0] i_2_reg_1353;
wire   [31:0] reversed_array_M_re_q0;
reg   [31:0] p_r_M_real_reg_1358;
wire    ap_CS_fsm_state12;
wire   [31:0] reversed_array_M_im_q0;
reg   [31:0] p_r_M_imag_reg_1364;
wire   [31:0] reversed_array_M_re_q1;
reg   [31:0] reversed_array_M_re_5_reg_1370;
wire   [31:0] reversed_array_M_im_q1;
reg   [31:0] reversed_array_M_im_5_reg_1376;
wire   [3:0] zext_ln77_2_fu_1047_p1;
reg   [3:0] zext_ln77_2_reg_1385;
wire    ap_CS_fsm_state19;
wire   [0:0] tmp_2_fu_1029_p3;
wire   [1:0] j_fu_1061_p2;
reg   [1:0] j_reg_1393;
wire    ap_CS_fsm_state20;
reg   [1:0] tmp_reg_1398;
wire   [0:0] icmp_ln76_fu_1055_p2;
wire   [63:0] zext_ln77_1_fu_1082_p1;
reg   [63:0] zext_ln77_1_reg_1403;
wire   [3:0] i_6_fu_1088_p2;
wire   [31:0] p_r_M_real_5_fu_1098_p3;
wire   [31:0] p_r_M_imag_5_fu_1108_p3;
wire   [63:0] zext_ln77_fu_1125_p1;
reg   [63:0] zext_ln77_reg_1436;
wire    ap_CS_fsm_state28;
wire   [2:0] i_4_fu_1137_p2;
reg   [2:0] i_4_reg_1455;
wire    ap_CS_fsm_state37;
wire   [63:0] zext_ln84_1_fu_1149_p1;
reg   [63:0] zext_ln84_1_reg_1460;
wire   [0:0] icmp_ln83_fu_1131_p2;
wire   [31:0] p_r_M_real_3_fu_1159_p6;
wire   [31:0] p_r_M_imag_3_fu_1175_p6;
wire   [63:0] zext_ln84_fu_1191_p1;
reg   [63:0] zext_ln84_reg_1488;
wire    ap_CS_fsm_state45;
wire   [3:0] i_7_fu_1203_p2;
reg   [3:0] i_7_reg_1507;
wire    ap_CS_fsm_state53;
reg    ap_block_state53;
wire   [0:0] icmp_ln89_fu_1197_p2;
wire   [0:0] output_data_last_V_fu_1215_p2;
reg   [0:0] output_data_last_V_reg_1522;
wire   [63:0] packed_data_fu_1229_p3;
reg   [2:0] input_array_M_real_address0;
reg    input_array_M_real_ce0;
reg    input_array_M_real_we0;
reg   [31:0] input_array_M_real_d0;
wire   [31:0] input_array_M_real_q0;
reg   [2:0] input_array_M_imag_address0;
reg    input_array_M_imag_ce0;
reg    input_array_M_imag_we0;
reg   [31:0] input_array_M_imag_d0;
wire   [31:0] input_array_M_imag_q0;
reg   [2:0] reversed_array_M_re_address0;
reg    reversed_array_M_re_ce0;
reg    reversed_array_M_re_we0;
reg   [31:0] reversed_array_M_re_d0;
wire   [2:0] reversed_array_M_re_address1;
reg    reversed_array_M_re_ce1;
reg   [2:0] reversed_array_M_im_address0;
reg    reversed_array_M_im_ce0;
reg    reversed_array_M_im_we0;
reg   [31:0] reversed_array_M_im_d0;
wire   [2:0] reversed_array_M_im_address1;
reg    reversed_array_M_im_ce1;
reg   [2:0] FFT_output_M_real_address0;
reg    FFT_output_M_real_ce0;
reg    FFT_output_M_real_we0;
reg   [31:0] FFT_output_M_real_d0;
reg   [2:0] FFT_output_M_real_address1;
reg    FFT_output_M_real_ce1;
reg    FFT_output_M_real_we1;
wire   [31:0] FFT_output_M_real_q1;
reg   [2:0] FFT_output_M_imag_address0;
reg    FFT_output_M_imag_ce0;
reg    FFT_output_M_imag_we0;
reg   [31:0] FFT_output_M_imag_d0;
reg   [2:0] FFT_output_M_imag_address1;
reg    FFT_output_M_imag_ce1;
reg    FFT_output_M_imag_we1;
wire   [31:0] FFT_output_M_imag_q1;
reg   [2:0] temp1_M_real_address0;
reg    temp1_M_real_ce0;
reg    temp1_M_real_we0;
reg   [31:0] temp1_M_real_d0;
reg   [2:0] temp1_M_real_address1;
reg    temp1_M_real_ce1;
reg    temp1_M_real_we1;
reg   [2:0] temp1_M_imag_address0;
reg    temp1_M_imag_ce0;
reg    temp1_M_imag_we0;
reg   [31:0] temp1_M_imag_d0;
reg   [2:0] temp1_M_imag_address1;
reg    temp1_M_imag_ce1;
reg    temp1_M_imag_we1;
reg   [2:0] temp2_M_real_address0;
reg    temp2_M_real_ce0;
reg    temp2_M_real_we0;
reg   [31:0] temp2_M_real_d0;
reg   [2:0] temp2_M_imag_address0;
reg    temp2_M_imag_ce0;
reg    temp2_M_imag_we0;
reg   [31:0] temp2_M_imag_d0;
reg   [2:0] phi_ln22_reg_557;
wire    ap_CS_fsm_state1;
wire   [0:0] icmp_ln22_fu_830_p2;
reg   [2:0] phi_ln23_reg_568;
wire   [0:0] icmp_ln23_fu_848_p2;
reg   [2:0] phi_ln24_reg_579;
wire   [0:0] icmp_ln24_fu_866_p2;
reg   [3:0] i_0_reg_590;
wire   [0:0] and_ln41_fu_928_p2;
reg   [3:0] i3_0_reg_601;
wire    ap_CS_fsm_state8;
reg   [2:0] phi_ln63_reg_612;
wire   [0:0] icmp_ln63_fu_969_p2;
reg   [2:0] phi_ln64_reg_623;
wire   [0:0] icmp_ln64_fu_987_p2;
reg   [3:0] i6_0_reg_634;
wire    ap_CS_fsm_state18;
reg   [3:0] i7_0_reg_645;
reg   [1:0] j_0_reg_657;
wire    ap_CS_fsm_state36;
reg   [2:0] i8_0_reg_669;
wire    ap_CS_fsm_state52;
reg   [3:0] i9_0_reg_681;
wire   [63:0] zext_ln22_fu_824_p1;
wire   [63:0] zext_ln23_fu_842_p1;
wire   [63:0] zext_ln24_fu_860_p1;
wire   [63:0] zext_ln40_fu_916_p1;
wire   [63:0] zext_ln60_1_fu_951_p1;
wire   [63:0] zext_ln63_fu_963_p1;
wire   [63:0] zext_ln64_fu_981_p1;
wire    ap_CS_fsm_state35;
wire   [63:0] zext_ln90_fu_1209_p1;
wire   [31:0] real_fu_906_p1;
wire   [31:0] imag_fu_911_p1;
reg   [31:0] grp_fu_692_p0;
reg   [31:0] grp_fu_692_p1;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state47;
reg   [31:0] grp_fu_696_p0;
reg   [31:0] grp_fu_696_p1;
reg   [31:0] grp_fu_700_p0;
reg   [31:0] grp_fu_700_p1;
reg   [31:0] grp_fu_704_p0;
reg   [31:0] grp_fu_704_p1;
reg   [31:0] grp_fu_708_p0;
reg   [31:0] grp_fu_708_p1;
reg   [31:0] grp_fu_713_p0;
reg   [31:0] grp_fu_713_p1;
reg   [31:0] grp_fu_718_p0;
reg   [31:0] grp_fu_718_p1;
reg   [31:0] grp_fu_723_p0;
reg   [31:0] grp_fu_723_p1;
wire   [31:0] real_part_fu_892_p1;
wire   [31:0] imag_part_fu_896_p4;
wire   [0:0] icmp_ln41_fu_922_p2;
wire   [2:0] trunc_ln67_fu_1007_p1;
wire   [2:0] or_ln69_fu_1011_p2;
wire   [2:0] trunc_ln74_fu_1037_p1;
wire   [2:0] or_ln77_fu_1041_p2;
wire   [3:0] zext_ln76_fu_1051_p1;
wire   [3:0] add_ln77_fu_1077_p2;
wire   [0:0] trunc_ln77_fu_1094_p1;
wire   [3:0] add_ln_fu_1118_p3;
wire   [2:0] xor_ln84_fu_1143_p2;
wire   [1:0] trunc_ln84_fu_1155_p1;
wire   [31:0] imag_part_2_fu_1225_p1;
wire   [31:0] real_part_2_fu_1221_p1;
reg   [1:0] grp_fu_692_opcode;
reg   [54:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 input_vector_V_data_V_0_sel_rd = 1'b0;
#0 input_vector_V_data_V_0_sel_wr = 1'b0;
#0 input_vector_V_data_V_0_state = 2'd0;
#0 input_vector_V_last_V_0_sel_rd = 1'b0;
#0 input_vector_V_last_V_0_sel_wr = 1'b0;
#0 input_vector_V_last_V_0_state = 2'd0;
#0 output_vector_V_data_V_1_sel_rd = 1'b0;
#0 output_vector_V_data_V_1_sel_wr = 1'b0;
#0 output_vector_V_data_V_1_state = 2'd0;
#0 output_vector_V_last_V_1_sel_rd = 1'b0;
#0 output_vector_V_last_V_1_sel_wr = 1'b0;
#0 output_vector_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 55'd1;
end

fft_rev8 #(
    .DataWidth( 3 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
rev8_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(rev8_address0),
    .ce0(rev8_ce0),
    .q0(rev8_q0)
);

fft_input_array_Mbkb #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
input_array_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_array_M_real_address0),
    .ce0(input_array_M_real_ce0),
    .we0(input_array_M_real_we0),
    .d0(input_array_M_real_d0),
    .q0(input_array_M_real_q0)
);

fft_input_array_Mbkb #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
input_array_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(input_array_M_imag_address0),
    .ce0(input_array_M_imag_ce0),
    .we0(input_array_M_imag_we0),
    .d0(input_array_M_imag_d0),
    .q0(input_array_M_imag_q0)
);

fft_reversed_arradEe #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
reversed_array_M_re_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(reversed_array_M_re_address0),
    .ce0(reversed_array_M_re_ce0),
    .we0(reversed_array_M_re_we0),
    .d0(reversed_array_M_re_d0),
    .q0(reversed_array_M_re_q0),
    .address1(reversed_array_M_re_address1),
    .ce1(reversed_array_M_re_ce1),
    .q1(reversed_array_M_re_q1)
);

fft_reversed_arradEe #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
reversed_array_M_im_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(reversed_array_M_im_address0),
    .ce0(reversed_array_M_im_ce0),
    .we0(reversed_array_M_im_we0),
    .d0(reversed_array_M_im_d0),
    .q0(reversed_array_M_im_q0),
    .address1(reversed_array_M_im_address1),
    .ce1(reversed_array_M_im_ce1),
    .q1(reversed_array_M_im_q1)
);

fft_FFT_output_M_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
FFT_output_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FFT_output_M_real_address0),
    .ce0(FFT_output_M_real_ce0),
    .we0(FFT_output_M_real_we0),
    .d0(FFT_output_M_real_d0),
    .address1(FFT_output_M_real_address1),
    .ce1(FFT_output_M_real_ce1),
    .we1(FFT_output_M_real_we1),
    .d1(reg_750),
    .q1(FFT_output_M_real_q1)
);

fft_FFT_output_M_fYi #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
FFT_output_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(FFT_output_M_imag_address0),
    .ce0(FFT_output_M_imag_ce0),
    .we0(FFT_output_M_imag_we0),
    .d0(FFT_output_M_imag_d0),
    .address1(FFT_output_M_imag_address1),
    .ce1(FFT_output_M_imag_ce1),
    .we1(FFT_output_M_imag_we1),
    .d1(reg_757),
    .q1(FFT_output_M_imag_q1)
);

fft_temp1_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp1_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp1_M_real_address0),
    .ce0(temp1_M_real_ce0),
    .we0(temp1_M_real_we0),
    .d0(temp1_M_real_d0),
    .q0(temp1_M_real_q0),
    .address1(temp1_M_real_address1),
    .ce1(temp1_M_real_ce1),
    .we1(temp1_M_real_we1),
    .d1(reg_750),
    .q1(temp1_M_real_q1)
);

fft_temp1_M_real #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp1_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp1_M_imag_address0),
    .ce0(temp1_M_imag_ce0),
    .we0(temp1_M_imag_we0),
    .d0(temp1_M_imag_d0),
    .q0(temp1_M_imag_q0),
    .address1(temp1_M_imag_address1),
    .ce1(temp1_M_imag_ce1),
    .we1(temp1_M_imag_we1),
    .d1(reg_757),
    .q1(temp1_M_imag_q1)
);

fft_input_array_Mbkb #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp2_M_real_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp2_M_real_address0),
    .ce0(temp2_M_real_ce0),
    .we0(temp2_M_real_we0),
    .d0(temp2_M_real_d0),
    .q0(temp2_M_real_q0)
);

fft_input_array_Mbkb #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
temp2_M_imag_U(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .address0(temp2_M_imag_address0),
    .ce0(temp2_M_imag_ce0),
    .we0(temp2_M_imag_we0),
    .d0(temp2_M_imag_d0),
    .q0(temp2_M_imag_q0)
);

fft_faddfsub_32nshbi #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_faddfsub_32nshbi_U1(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_692_p0),
    .din1(grp_fu_692_p1),
    .opcode(grp_fu_692_opcode),
    .ce(1'b1),
    .dout(grp_fu_692_p2)
);

fft_fadd_32ns_32nibs #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_fadd_32ns_32nibs_U2(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_696_p0),
    .din1(grp_fu_696_p1),
    .ce(1'b1),
    .dout(grp_fu_696_p2)
);

fft_fsub_32ns_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_fsub_32ns_32njbC_U3(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_700_p0),
    .din1(grp_fu_700_p1),
    .ce(1'b1),
    .dout(grp_fu_700_p2)
);

fft_fsub_32ns_32njbC #(
    .ID( 1 ),
    .NUM_STAGE( 5 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_fsub_32ns_32njbC_U4(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_704_p0),
    .din1(grp_fu_704_p1),
    .ce(1'b1),
    .dout(grp_fu_704_p2)
);

fft_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_fmul_32ns_32nkbM_U5(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_708_p0),
    .din1(grp_fu_708_p1),
    .ce(1'b1),
    .dout(grp_fu_708_p2)
);

fft_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_fmul_32ns_32nkbM_U6(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_713_p0),
    .din1(grp_fu_713_p1),
    .ce(1'b1),
    .dout(grp_fu_713_p2)
);

fft_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_fmul_32ns_32nkbM_U7(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_718_p0),
    .din1(grp_fu_718_p1),
    .ce(1'b1),
    .dout(grp_fu_718_p2)
);

fft_fmul_32ns_32nkbM #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
fft_fmul_32ns_32nkbM_U8(
    .clk(ap_clk),
    .reset(ap_rst_n_inv),
    .din0(grp_fu_723_p0),
    .din1(grp_fu_723_p1),
    .ce(1'b1),
    .dout(grp_fu_723_p2)
);

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
fft_mux_42_32_1_1_U9(
    .din0(32'd1065353216),
    .din1(32'd1060439283),
    .din2(32'd613232946),
    .din3(32'd3207922931),
    .din4(trunc_ln84_fu_1155_p1),
    .dout(p_r_M_real_3_fu_1159_p6)
);

fft_mux_42_32_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .din2_WIDTH( 32 ),
    .din3_WIDTH( 32 ),
    .din4_WIDTH( 2 ),
    .dout_WIDTH( 32 ))
fft_mux_42_32_1_1_U10(
    .din0(32'd0),
    .din1(32'd3207922931),
    .din2(32'd3212836864),
    .din3(32'd3207922931),
    .din4(trunc_ln84_fu_1155_p1),
    .dout(p_r_M_imag_3_fu_1175_p6)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_vector_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_vector_V_data_V_0_ack_out == 1'b1) & (input_vector_V_data_V_0_vld_out == 1'b1))) begin
            input_vector_V_data_V_0_sel_rd <= ~input_vector_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_vector_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_vector_V_data_V_0_ack_in == 1'b1) & (input_vector_V_data_V_0_vld_in == 1'b1))) begin
            input_vector_V_data_V_0_sel_wr <= ~input_vector_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_vector_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((input_vector_V_data_V_0_state == 2'd2) & (input_vector_V_data_V_0_vld_in == 1'b0)) | ((input_vector_V_data_V_0_state == 2'd3) & (input_vector_V_data_V_0_vld_in == 1'b0) & (input_vector_V_data_V_0_ack_out == 1'b1)))) begin
            input_vector_V_data_V_0_state <= 2'd2;
        end else if ((((input_vector_V_data_V_0_state == 2'd1) & (input_vector_V_data_V_0_ack_out == 1'b0)) | ((input_vector_V_data_V_0_state == 2'd3) & (input_vector_V_data_V_0_ack_out == 1'b0) & (input_vector_V_data_V_0_vld_in == 1'b1)))) begin
            input_vector_V_data_V_0_state <= 2'd1;
        end else if (((~((input_vector_V_data_V_0_vld_in == 1'b0) & (input_vector_V_data_V_0_ack_out == 1'b1)) & ~((input_vector_V_data_V_0_ack_out == 1'b0) & (input_vector_V_data_V_0_vld_in == 1'b1)) & (input_vector_V_data_V_0_state == 2'd3)) | ((input_vector_V_data_V_0_state == 2'd1) & (input_vector_V_data_V_0_ack_out == 1'b1)) | ((input_vector_V_data_V_0_state == 2'd2) & (input_vector_V_data_V_0_vld_in == 1'b1)))) begin
            input_vector_V_data_V_0_state <= 2'd3;
        end else begin
            input_vector_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_vector_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((input_vector_V_last_V_0_ack_out == 1'b1) & (input_vector_V_last_V_0_vld_out == 1'b1))) begin
            input_vector_V_last_V_0_sel_rd <= ~input_vector_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_vector_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((input_vector_V_last_V_0_ack_in == 1'b1) & (input_vector_V_last_V_0_vld_in == 1'b1))) begin
            input_vector_V_last_V_0_sel_wr <= ~input_vector_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        input_vector_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((input_vector_V_last_V_0_state == 2'd2) & (input_vector_V_last_V_0_vld_in == 1'b0)) | ((input_vector_V_last_V_0_state == 2'd3) & (input_vector_V_last_V_0_vld_in == 1'b0) & (input_vector_V_last_V_0_ack_out == 1'b1)))) begin
            input_vector_V_last_V_0_state <= 2'd2;
        end else if ((((input_vector_V_last_V_0_state == 2'd1) & (input_vector_V_last_V_0_ack_out == 1'b0)) | ((input_vector_V_last_V_0_state == 2'd3) & (input_vector_V_last_V_0_ack_out == 1'b0) & (input_vector_V_last_V_0_vld_in == 1'b1)))) begin
            input_vector_V_last_V_0_state <= 2'd1;
        end else if (((~((input_vector_V_last_V_0_vld_in == 1'b0) & (input_vector_V_last_V_0_ack_out == 1'b1)) & ~((input_vector_V_last_V_0_ack_out == 1'b0) & (input_vector_V_last_V_0_vld_in == 1'b1)) & (input_vector_V_last_V_0_state == 2'd3)) | ((input_vector_V_last_V_0_state == 2'd1) & (input_vector_V_last_V_0_ack_out == 1'b1)) | ((input_vector_V_last_V_0_state == 2'd2) & (input_vector_V_last_V_0_vld_in == 1'b1)))) begin
            input_vector_V_last_V_0_state <= 2'd3;
        end else begin
            input_vector_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_vector_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_vector_V_data_V_1_ack_out == 1'b1) & (output_vector_V_data_V_1_vld_out == 1'b1))) begin
            output_vector_V_data_V_1_sel_rd <= ~output_vector_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_vector_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_vector_V_data_V_1_ack_in == 1'b1) & (output_vector_V_data_V_1_vld_in == 1'b1))) begin
            output_vector_V_data_V_1_sel_wr <= ~output_vector_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_vector_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((output_vector_V_data_V_1_state == 2'd2) & (output_vector_V_data_V_1_vld_in == 1'b0)) | ((output_vector_V_data_V_1_state == 2'd3) & (output_vector_V_data_V_1_vld_in == 1'b0) & (output_vector_V_data_V_1_ack_out == 1'b1)))) begin
            output_vector_V_data_V_1_state <= 2'd2;
        end else if ((((output_vector_V_data_V_1_state == 2'd1) & (output_vector_TREADY == 1'b0)) | ((output_vector_V_data_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0) & (output_vector_V_data_V_1_vld_in == 1'b1)))) begin
            output_vector_V_data_V_1_state <= 2'd1;
        end else if (((~((output_vector_V_data_V_1_vld_in == 1'b0) & (output_vector_V_data_V_1_ack_out == 1'b1)) & ~((output_vector_TREADY == 1'b0) & (output_vector_V_data_V_1_vld_in == 1'b1)) & (output_vector_V_data_V_1_state == 2'd3)) | ((output_vector_V_data_V_1_state == 2'd1) & (output_vector_V_data_V_1_ack_out == 1'b1)) | ((output_vector_V_data_V_1_state == 2'd2) & (output_vector_V_data_V_1_vld_in == 1'b1)))) begin
            output_vector_V_data_V_1_state <= 2'd3;
        end else begin
            output_vector_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_vector_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((output_vector_V_last_V_1_ack_out == 1'b1) & (output_vector_V_last_V_1_vld_out == 1'b1))) begin
            output_vector_V_last_V_1_sel_rd <= ~output_vector_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_vector_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((output_vector_V_last_V_1_ack_in == 1'b1) & (output_vector_V_last_V_1_vld_in == 1'b1))) begin
            output_vector_V_last_V_1_sel_wr <= ~output_vector_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        output_vector_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((output_vector_V_last_V_1_state == 2'd2) & (output_vector_V_last_V_1_vld_in == 1'b0)) | ((output_vector_V_last_V_1_state == 2'd3) & (output_vector_V_last_V_1_vld_in == 1'b0) & (output_vector_V_last_V_1_ack_out == 1'b1)))) begin
            output_vector_V_last_V_1_state <= 2'd2;
        end else if ((((output_vector_V_last_V_1_state == 2'd1) & (output_vector_TREADY == 1'b0)) | ((output_vector_V_last_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0) & (output_vector_V_last_V_1_vld_in == 1'b1)))) begin
            output_vector_V_last_V_1_state <= 2'd1;
        end else if (((~((output_vector_V_last_V_1_vld_in == 1'b0) & (output_vector_V_last_V_1_ack_out == 1'b1)) & ~((output_vector_TREADY == 1'b0) & (output_vector_V_last_V_1_vld_in == 1'b1)) & (output_vector_V_last_V_1_state == 2'd3)) | ((output_vector_V_last_V_1_state == 2'd1) & (output_vector_V_last_V_1_ack_out == 1'b1)) | ((output_vector_V_last_V_1_state == 2'd2) & (output_vector_V_last_V_1_vld_in == 1'b1)))) begin
            output_vector_V_last_V_1_state <= 2'd3;
        end else begin
            output_vector_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        i3_0_reg_601 <= i_1_reg_1276;
    end else if ((~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & ((1'd1 == and_ln41_fu_928_p2) | (icmp_ln28_fu_872_p2 == 1'd1)))) begin
        i3_0_reg_601 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
        i6_0_reg_634 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        i6_0_reg_634 <= i_2_reg_1353;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_993_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
        i7_0_reg_645 <= 4'd0;
    end else if (((icmp_ln76_fu_1055_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
        i7_0_reg_645 <= i_6_fu_1088_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_1029_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
        i8_0_reg_669 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        i8_0_reg_669 <= i_4_reg_1455;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
        i9_0_reg_681 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state55) & (output_vector_V_data_V_1_ack_in == 1'b1))) begin
        i9_0_reg_681 <= i_7_reg_1507;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln24_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        i_0_reg_590 <= 4'd0;
    end else if ((~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (1'd0 == and_ln41_fu_928_p2) & (icmp_ln28_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        i_0_reg_590 <= i_fu_878_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_1029_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        j_0_reg_657 <= 2'd0;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        j_0_reg_657 <= j_reg_1393;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_830_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln22_reg_557 <= add_ln22_fu_818_p2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        phi_ln22_reg_557 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln22_fu_830_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        phi_ln23_reg_568 <= 3'd0;
    end else if (((icmp_ln23_fu_848_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln23_reg_568 <= add_ln23_fu_836_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln23_fu_848_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        phi_ln24_reg_579 <= 3'd0;
    end else if (((icmp_ln24_fu_866_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_ln24_reg_579 <= add_ln24_fu_854_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_934_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
        phi_ln63_reg_612 <= 3'd0;
    end else if (((icmp_ln63_fu_969_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        phi_ln63_reg_612 <= add_ln63_fu_957_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln63_fu_969_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
        phi_ln64_reg_623 <= 3'd0;
    end else if (((icmp_ln64_fu_987_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state10))) begin
        phi_ln64_reg_623 <= add_ln64_fu_975_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        reg_764 <= temp1_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        reg_764 <= temp1_M_real_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state29)) begin
        reg_773 <= temp1_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        reg_773 <= temp1_M_imag_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        i_1_reg_1276 <= i_1_fu_940_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_1_fu_993_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        i_2_reg_1353 <= i_2_fu_1023_p2;
        zext_ln69_1_reg_1337[2 : 1] <= zext_ln69_1_fu_1017_p1[2 : 1];
        zext_ln69_reg_1321[3 : 0] <= zext_ln69_fu_1001_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state37)) begin
        i_4_reg_1455 <= i_4_fu_1137_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_vector_V_last_V_1_state == 2'd1) | (output_vector_V_data_V_1_state == 2'd1) | ((output_vector_V_last_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0)) | ((output_vector_V_data_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state53))) begin
        i_7_reg_1507 <= i_7_fu_1203_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((input_vector_V_data_V_0_load_A == 1'b1)) begin
        input_vector_V_data_V_0_payload_A <= input_vector_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_vector_V_data_V_0_load_B == 1'b1)) begin
        input_vector_V_data_V_0_payload_B <= input_vector_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((input_vector_V_last_V_0_load_A == 1'b1)) begin
        input_vector_V_last_V_0_payload_A <= input_vector_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((input_vector_V_last_V_0_load_B == 1'b1)) begin
        input_vector_V_last_V_0_payload_B <= input_vector_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        j_reg_1393 <= j_fu_1061_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((~((output_vector_V_last_V_1_state == 2'd1) | (output_vector_V_data_V_1_state == 2'd1) | ((output_vector_V_last_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0)) | ((output_vector_V_data_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0))) & (icmp_ln89_fu_1197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        output_data_last_V_reg_1522 <= output_data_last_V_fu_1215_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((output_vector_V_data_V_1_load_A == 1'b1)) begin
        output_vector_V_data_V_1_payload_A <= packed_data_fu_1229_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((output_vector_V_data_V_1_load_B == 1'b1)) begin
        output_vector_V_data_V_1_payload_B <= packed_data_fu_1229_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((output_vector_V_last_V_1_load_A == 1'b1)) begin
        output_vector_V_last_V_1_payload_A <= output_data_last_V_reg_1522;
    end
end

always @ (posedge ap_clk) begin
    if ((output_vector_V_last_V_1_load_B == 1'b1)) begin
        output_vector_V_last_V_1_payload_B <= output_data_last_V_reg_1522;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        p_r_M_imag_reg_1364 <= reversed_array_M_im_q0;
        p_r_M_real_reg_1358 <= reversed_array_M_re_q0;
        reversed_array_M_im_5_reg_1376 <= reversed_array_M_im_q1;
        reversed_array_M_re_5_reg_1370 <= reversed_array_M_re_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_732 <= grp_fu_692_p2;
        reg_741 <= grp_fu_696_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state51) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state17))) begin
        reg_750 <= grp_fu_700_p2;
        reg_757 <= grp_fu_704_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state24))) begin
        reg_782 <= grp_fu_708_p2;
        reg_787 <= grp_fu_713_p2;
        reg_792 <= grp_fu_718_p2;
        reg_797 <= grp_fu_723_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state46))) begin
        reg_802 <= temp2_M_real_q0;
        reg_810 <= temp2_M_imag_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln76_fu_1055_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state20))) begin
        tmp_reg_1398 <= {{i7_0_reg_645[3:2]}};
        zext_ln77_1_reg_1403[3 : 0] <= zext_ln77_1_fu_1082_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln58_fu_934_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        zext_ln60_reg_1281[3 : 0] <= zext_ln60_fu_946_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_1029_p3 == 1'd0) & (1'b1 == ap_CS_fsm_state19))) begin
        zext_ln77_2_reg_1385[0] <= zext_ln77_2_fu_1047_p1[0];
zext_ln77_2_reg_1385[2] <= zext_ln77_2_fu_1047_p1[2];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        zext_ln77_reg_1436[3 : 0] <= zext_ln77_fu_1125_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln83_fu_1131_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state37))) begin
        zext_ln84_1_reg_1460[2 : 0] <= zext_ln84_1_fu_1149_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        zext_ln84_reg_1488[2 : 0] <= zext_ln84_fu_1191_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        FFT_output_M_imag_address0 = zext_ln84_reg_1488;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        FFT_output_M_imag_address0 = zext_ln24_fu_860_p1;
    end else begin
        FFT_output_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        FFT_output_M_imag_address1 = zext_ln90_fu_1209_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        FFT_output_M_imag_address1 = zext_ln84_1_reg_1460;
    end else begin
        FFT_output_M_imag_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state4))) begin
        FFT_output_M_imag_ce0 = 1'b1;
    end else begin
        FFT_output_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (~((output_vector_V_last_V_1_state == 2'd1) | (output_vector_V_data_V_1_state == 2'd1) | ((output_vector_V_last_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0)) | ((output_vector_V_data_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state53)))) begin
        FFT_output_M_imag_ce1 = 1'b1;
    end else begin
        FFT_output_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        FFT_output_M_imag_d0 = reg_741;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        FFT_output_M_imag_d0 = 32'd0;
    end else begin
        FFT_output_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state4))) begin
        FFT_output_M_imag_we0 = 1'b1;
    end else begin
        FFT_output_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        FFT_output_M_imag_we1 = 1'b1;
    end else begin
        FFT_output_M_imag_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        FFT_output_M_real_address0 = zext_ln84_reg_1488;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        FFT_output_M_real_address0 = zext_ln24_fu_860_p1;
    end else begin
        FFT_output_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        FFT_output_M_real_address1 = zext_ln90_fu_1209_p1;
    end else if ((1'b1 == ap_CS_fsm_state52)) begin
        FFT_output_M_real_address1 = zext_ln84_1_reg_1460;
    end else begin
        FFT_output_M_real_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state4))) begin
        FFT_output_M_real_ce0 = 1'b1;
    end else begin
        FFT_output_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (~((output_vector_V_last_V_1_state == 2'd1) | (output_vector_V_data_V_1_state == 2'd1) | ((output_vector_V_last_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0)) | ((output_vector_V_data_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0))) & (1'b1 == ap_CS_fsm_state53)))) begin
        FFT_output_M_real_ce1 = 1'b1;
    end else begin
        FFT_output_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        FFT_output_M_real_d0 = reg_732;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        FFT_output_M_real_d0 = 32'd0;
    end else begin
        FFT_output_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state52) | (1'b1 == ap_CS_fsm_state4))) begin
        FFT_output_M_real_we0 = 1'b1;
    end else begin
        FFT_output_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        FFT_output_M_real_we1 = 1'b1;
    end else begin
        FFT_output_M_real_we1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_692_opcode = 2'd1;
    end else if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state13))) begin
        grp_fu_692_opcode = 2'd0;
    end else begin
        grp_fu_692_opcode = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_692_p0 = reg_802;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_692_p0 = reg_764;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_692_p0 = reg_782;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_692_p0 = p_r_M_real_reg_1358;
    end else begin
        grp_fu_692_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_fu_692_p1 = reg_732;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_692_p1 = reg_787;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_692_p1 = reversed_array_M_re_5_reg_1370;
    end else begin
        grp_fu_692_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_696_p0 = reg_810;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_696_p0 = reg_773;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_696_p0 = reg_792;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_696_p0 = p_r_M_imag_reg_1364;
    end else begin
        grp_fu_696_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_fu_696_p1 = reg_741;
    end else if (((1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state25))) begin
        grp_fu_696_p1 = reg_797;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_696_p1 = reversed_array_M_im_5_reg_1376;
    end else begin
        grp_fu_696_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_700_p0 = reg_802;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_700_p0 = reg_764;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_700_p0 = p_r_M_real_reg_1358;
    end else begin
        grp_fu_700_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_fu_700_p1 = reg_732;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_700_p1 = reversed_array_M_re_5_reg_1370;
    end else begin
        grp_fu_700_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state47)) begin
        grp_fu_704_p0 = reg_810;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        grp_fu_704_p0 = reg_773;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_704_p0 = p_r_M_imag_reg_1364;
    end else begin
        grp_fu_704_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state30))) begin
        grp_fu_704_p1 = reg_741;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        grp_fu_704_p1 = reversed_array_M_im_5_reg_1376;
    end else begin
        grp_fu_704_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_708_p0 = p_r_M_real_3_fu_1159_p6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_708_p0 = p_r_M_real_5_fu_1098_p3;
    end else begin
        grp_fu_708_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_708_p1 = temp2_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_708_p1 = temp1_M_real_q1;
    end else begin
        grp_fu_708_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_713_p0 = p_r_M_imag_3_fu_1175_p6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_713_p0 = p_r_M_imag_5_fu_1108_p3;
    end else begin
        grp_fu_713_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_713_p1 = temp2_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_713_p1 = temp1_M_imag_q1;
    end else begin
        grp_fu_713_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_718_p0 = p_r_M_imag_3_fu_1175_p6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_718_p0 = p_r_M_imag_5_fu_1108_p3;
    end else begin
        grp_fu_718_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_718_p1 = temp2_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_718_p1 = temp1_M_real_q1;
    end else begin
        grp_fu_718_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_723_p0 = p_r_M_real_3_fu_1159_p6;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_723_p0 = p_r_M_real_5_fu_1098_p3;
    end else begin
        grp_fu_723_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state38)) begin
        grp_fu_723_p1 = temp2_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        grp_fu_723_p1 = temp1_M_imag_q1;
    end else begin
        grp_fu_723_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_array_M_imag_address0 = zext_ln60_1_fu_951_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_array_M_imag_address0 = zext_ln40_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_array_M_imag_address0 = zext_ln22_fu_824_p1;
    end else begin
        input_array_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_array_M_imag_ce0 = 1'b1;
    end else begin
        input_array_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_array_M_imag_d0 = imag_fu_911_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_array_M_imag_d0 = 32'd0;
    end else begin
        input_array_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (icmp_ln28_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_array_M_imag_we0 = 1'b1;
    end else begin
        input_array_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_array_M_real_address0 = zext_ln60_1_fu_951_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        input_array_M_real_address0 = zext_ln40_fu_916_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_array_M_real_address0 = zext_ln22_fu_824_p1;
    end else begin
        input_array_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state2) | (~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_array_M_real_ce0 = 1'b1;
    end else begin
        input_array_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        input_array_M_real_d0 = real_fu_906_p1;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        input_array_M_real_d0 = 32'd0;
    end else begin
        input_array_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (icmp_ln28_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5)))) begin
        input_array_M_real_we0 = 1'b1;
    end else begin
        input_array_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln28_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        input_vector_TDATA_blk_n = input_vector_V_data_V_0_state[1'd0];
    end else begin
        input_vector_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (icmp_ln28_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        input_vector_V_data_V_0_ack_out = 1'b1;
    end else begin
        input_vector_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_vector_V_data_V_0_sel == 1'b1)) begin
        input_vector_V_data_V_0_data_out = input_vector_V_data_V_0_payload_B;
    end else begin
        input_vector_V_data_V_0_data_out = input_vector_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if ((~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (icmp_ln28_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        input_vector_V_last_V_0_ack_out = 1'b1;
    end else begin
        input_vector_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((input_vector_V_last_V_0_sel == 1'b1)) begin
        input_vector_V_last_V_0_data_out = input_vector_V_last_V_0_payload_B;
    end else begin
        input_vector_V_last_V_0_data_out = input_vector_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54))) begin
        output_vector_TDATA_blk_n = output_vector_V_data_V_1_state[1'd1];
    end else begin
        output_vector_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((output_vector_V_data_V_1_sel == 1'b1)) begin
        output_vector_V_data_V_1_data_out = output_vector_V_data_V_1_payload_B;
    end else begin
        output_vector_V_data_V_1_data_out = output_vector_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) & (output_vector_V_data_V_1_ack_in == 1'b1))) begin
        output_vector_V_data_V_1_vld_in = 1'b1;
    end else begin
        output_vector_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((output_vector_V_last_V_1_sel == 1'b1)) begin
        output_vector_V_last_V_1_data_out = output_vector_V_last_V_1_payload_B;
    end else begin
        output_vector_V_last_V_1_data_out = output_vector_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state54) & (output_vector_V_data_V_1_ack_in == 1'b1))) begin
        output_vector_V_last_V_1_vld_in = 1'b1;
    end else begin
        output_vector_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        rev8_ce0 = 1'b1;
    end else begin
        rev8_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reversed_array_M_im_address0 = zext_ln69_fu_1001_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        reversed_array_M_im_address0 = zext_ln60_reg_1281;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reversed_array_M_im_address0 = zext_ln23_fu_842_p1;
    end else begin
        reversed_array_M_im_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3))) begin
        reversed_array_M_im_ce0 = 1'b1;
    end else begin
        reversed_array_M_im_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reversed_array_M_im_ce1 = 1'b1;
    end else begin
        reversed_array_M_im_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reversed_array_M_im_d0 = input_array_M_imag_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reversed_array_M_im_d0 = 32'd0;
    end else begin
        reversed_array_M_im_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        reversed_array_M_im_we0 = 1'b1;
    end else begin
        reversed_array_M_im_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reversed_array_M_re_address0 = zext_ln69_fu_1001_p1;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        reversed_array_M_re_address0 = zext_ln60_reg_1281;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reversed_array_M_re_address0 = zext_ln23_fu_842_p1;
    end else begin
        reversed_array_M_re_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state3))) begin
        reversed_array_M_re_ce0 = 1'b1;
    end else begin
        reversed_array_M_re_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        reversed_array_M_re_ce1 = 1'b1;
    end else begin
        reversed_array_M_re_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        reversed_array_M_re_d0 = input_array_M_real_q0;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reversed_array_M_re_d0 = 32'd0;
    end else begin
        reversed_array_M_re_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state3))) begin
        reversed_array_M_re_we0 = 1'b1;
    end else begin
        reversed_array_M_re_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        temp1_M_imag_address0 = zext_ln77_fu_1125_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_M_imag_address0 = zext_ln69_reg_1321;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_M_imag_address0 = zext_ln63_fu_963_p1;
    end else begin
        temp1_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        temp1_M_imag_address1 = zext_ln77_1_fu_1082_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_M_imag_address1 = zext_ln69_1_reg_1337;
    end else begin
        temp1_M_imag_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state9))) begin
        temp1_M_imag_ce0 = 1'b1;
    end else begin
        temp1_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20))) begin
        temp1_M_imag_ce1 = 1'b1;
    end else begin
        temp1_M_imag_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_M_imag_d0 = reg_741;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_M_imag_d0 = 32'd0;
    end else begin
        temp1_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state9))) begin
        temp1_M_imag_we0 = 1'b1;
    end else begin
        temp1_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_M_imag_we1 = 1'b1;
    end else begin
        temp1_M_imag_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state28)) begin
        temp1_M_real_address0 = zext_ln77_fu_1125_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_M_real_address0 = zext_ln69_reg_1321;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_M_real_address0 = zext_ln63_fu_963_p1;
    end else begin
        temp1_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state20)) begin
        temp1_M_real_address1 = zext_ln77_1_fu_1082_p1;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_M_real_address1 = zext_ln69_1_reg_1337;
    end else begin
        temp1_M_real_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state9))) begin
        temp1_M_real_ce0 = 1'b1;
    end else begin
        temp1_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state20))) begin
        temp1_M_real_ce1 = 1'b1;
    end else begin
        temp1_M_real_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_M_real_d0 = reg_732;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        temp1_M_real_d0 = 32'd0;
    end else begin
        temp1_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state9))) begin
        temp1_M_real_we0 = 1'b1;
    end else begin
        temp1_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state18)) begin
        temp1_M_real_we1 = 1'b1;
    end else begin
        temp1_M_real_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        temp2_M_imag_address0 = zext_ln84_fu_1191_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        temp2_M_imag_address0 = zext_ln84_1_fu_1149_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        temp2_M_imag_address0 = zext_ln77_1_reg_1403;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp2_M_imag_address0 = zext_ln77_reg_1436;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp2_M_imag_address0 = zext_ln64_fu_981_p1;
    end else begin
        temp2_M_imag_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state10))) begin
        temp2_M_imag_ce0 = 1'b1;
    end else begin
        temp2_M_imag_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        temp2_M_imag_d0 = reg_757;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp2_M_imag_d0 = reg_741;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp2_M_imag_d0 = 32'd0;
    end else begin
        temp2_M_imag_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state10))) begin
        temp2_M_imag_we0 = 1'b1;
    end else begin
        temp2_M_imag_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state45)) begin
        temp2_M_real_address0 = zext_ln84_fu_1191_p1;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        temp2_M_real_address0 = zext_ln84_1_fu_1149_p1;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        temp2_M_real_address0 = zext_ln77_1_reg_1403;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp2_M_real_address0 = zext_ln77_reg_1436;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp2_M_real_address0 = zext_ln64_fu_981_p1;
    end else begin
        temp2_M_real_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state10))) begin
        temp2_M_real_ce0 = 1'b1;
    end else begin
        temp2_M_real_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state36)) begin
        temp2_M_real_d0 = reg_750;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        temp2_M_real_d0 = reg_732;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        temp2_M_real_d0 = 32'd0;
    end else begin
        temp2_M_real_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state10))) begin
        temp2_M_real_we0 = 1'b1;
    end else begin
        temp2_M_real_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln22_fu_830_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln23_fu_848_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((icmp_ln24_fu_866_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if ((~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (1'b1 == ap_CS_fsm_state5) & ((1'd1 == and_ln41_fu_928_p2) | (icmp_ln28_fu_872_p2 == 1'd1)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else if ((~((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0)) & (1'd0 == and_ln41_fu_928_p2) & (icmp_ln28_fu_872_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((icmp_ln58_fu_934_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state6))) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state9 : begin
            if (((icmp_ln63_fu_969_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state9))) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (((icmp_ln64_fu_987_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state10))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (((tmp_1_fu_993_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state11))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state19 : begin
            if (((tmp_2_fu_1029_p3 == 1'd1) & (1'b1 == ap_CS_fsm_state19))) begin
                ap_NS_fsm = ap_ST_fsm_state37;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state20 : begin
            if (((icmp_ln76_fu_1055_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state20))) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state37 : begin
            if (((icmp_ln83_fu_1131_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state37))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state38;
            end
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state53 : begin
            if ((~((output_vector_V_last_V_1_state == 2'd1) | (output_vector_V_data_V_1_state == 2'd1) | ((output_vector_V_last_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0)) | ((output_vector_V_data_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0))) & (icmp_ln89_fu_1197_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else if ((~((output_vector_V_last_V_1_state == 2'd1) | (output_vector_V_data_V_1_state == 2'd1) | ((output_vector_V_last_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0)) | ((output_vector_V_data_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0))) & (icmp_ln89_fu_1197_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            if (((1'b1 == ap_CS_fsm_state54) & (output_vector_V_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end
        end
        ap_ST_fsm_state55 : begin
            if (((1'b1 == ap_CS_fsm_state55) & (output_vector_V_data_V_1_ack_in == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state55;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln22_fu_818_p2 = (phi_ln22_reg_557 + 3'd1);

assign add_ln23_fu_836_p2 = (phi_ln23_reg_568 + 3'd1);

assign add_ln24_fu_854_p2 = (phi_ln24_reg_579 + 3'd1);

assign add_ln63_fu_957_p2 = (phi_ln63_reg_612 + 3'd1);

assign add_ln64_fu_975_p2 = (phi_ln64_reg_623 + 3'd1);

assign add_ln77_fu_1077_p2 = (zext_ln77_2_reg_1385 + zext_ln76_fu_1051_p1);

assign add_ln_fu_1118_p3 = {{tmp_reg_1398}, {j_0_reg_657}};

assign and_ln41_fu_928_p2 = (input_vector_V_last_V_0_data_out & icmp_ln41_fu_922_p2);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

always @ (*) begin
    ap_block_state5 = ((icmp_ln28_fu_872_p2 == 1'd0) & (input_vector_V_data_V_0_vld_out == 1'b0));
end

always @ (*) begin
    ap_block_state53 = ((output_vector_V_last_V_1_state == 2'd1) | (output_vector_V_data_V_1_state == 2'd1) | ((output_vector_V_last_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0)) | ((output_vector_V_data_V_1_state == 2'd3) & (output_vector_TREADY == 1'b0)));
end

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign i_1_fu_940_p2 = (i3_0_reg_601 + 4'd1);

assign i_2_fu_1023_p2 = (4'd2 + i6_0_reg_634);

assign i_4_fu_1137_p2 = (i8_0_reg_669 + 3'd1);

assign i_6_fu_1088_p2 = (i7_0_reg_645 + 4'd4);

assign i_7_fu_1203_p2 = (i9_0_reg_681 + 4'd1);

assign i_fu_878_p2 = (i_0_reg_590 + 4'd1);

assign icmp_ln22_fu_830_p2 = ((phi_ln22_reg_557 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln23_fu_848_p2 = ((phi_ln23_reg_568 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln24_fu_866_p2 = ((phi_ln24_reg_579 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln28_fu_872_p2 = ((i_0_reg_590 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_922_p2 = ((i_0_reg_590 < 4'd7) ? 1'b1 : 1'b0);

assign icmp_ln58_fu_934_p2 = ((i3_0_reg_601 == 4'd8) ? 1'b1 : 1'b0);

assign icmp_ln63_fu_969_p2 = ((phi_ln63_reg_612 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_987_p2 = ((phi_ln64_reg_623 == 3'd7) ? 1'b1 : 1'b0);

assign icmp_ln76_fu_1055_p2 = ((j_0_reg_657 == 2'd2) ? 1'b1 : 1'b0);

assign icmp_ln83_fu_1131_p2 = ((i8_0_reg_669 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln89_fu_1197_p2 = ((i9_0_reg_681 == 4'd8) ? 1'b1 : 1'b0);

assign imag_fu_911_p1 = imag_part_fu_896_p4;

assign imag_part_2_fu_1225_p1 = FFT_output_M_imag_q1;

assign imag_part_fu_896_p4 = {{input_vector_V_data_V_0_data_out[63:32]}};

assign input_vector_TREADY = input_vector_V_last_V_0_state[1'd1];

assign input_vector_V_data_V_0_ack_in = input_vector_V_data_V_0_state[1'd1];

assign input_vector_V_data_V_0_load_A = (input_vector_V_data_V_0_state_cmp_full & ~input_vector_V_data_V_0_sel_wr);

assign input_vector_V_data_V_0_load_B = (input_vector_V_data_V_0_state_cmp_full & input_vector_V_data_V_0_sel_wr);

assign input_vector_V_data_V_0_sel = input_vector_V_data_V_0_sel_rd;

assign input_vector_V_data_V_0_state_cmp_full = ((input_vector_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_vector_V_data_V_0_vld_in = input_vector_TVALID;

assign input_vector_V_data_V_0_vld_out = input_vector_V_data_V_0_state[1'd0];

assign input_vector_V_last_V_0_ack_in = input_vector_V_last_V_0_state[1'd1];

assign input_vector_V_last_V_0_load_A = (input_vector_V_last_V_0_state_cmp_full & ~input_vector_V_last_V_0_sel_wr);

assign input_vector_V_last_V_0_load_B = (input_vector_V_last_V_0_state_cmp_full & input_vector_V_last_V_0_sel_wr);

assign input_vector_V_last_V_0_sel = input_vector_V_last_V_0_sel_rd;

assign input_vector_V_last_V_0_state_cmp_full = ((input_vector_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign input_vector_V_last_V_0_vld_in = input_vector_TVALID;

assign input_vector_V_last_V_0_vld_out = input_vector_V_last_V_0_state[1'd0];

assign j_fu_1061_p2 = (j_0_reg_657 + 2'd1);

assign or_ln69_fu_1011_p2 = (trunc_ln67_fu_1007_p1 | 3'd1);

assign or_ln77_fu_1041_p2 = (trunc_ln74_fu_1037_p1 | 3'd2);

assign output_data_last_V_fu_1215_p2 = ((i9_0_reg_681 == 4'd7) ? 1'b1 : 1'b0);

assign output_vector_TDATA = output_vector_V_data_V_1_data_out;

assign output_vector_TLAST = output_vector_V_last_V_1_data_out;

assign output_vector_TVALID = output_vector_V_last_V_1_state[1'd0];

assign output_vector_V_data_V_1_ack_in = output_vector_V_data_V_1_state[1'd1];

assign output_vector_V_data_V_1_ack_out = output_vector_TREADY;

assign output_vector_V_data_V_1_load_A = (output_vector_V_data_V_1_state_cmp_full & ~output_vector_V_data_V_1_sel_wr);

assign output_vector_V_data_V_1_load_B = (output_vector_V_data_V_1_state_cmp_full & output_vector_V_data_V_1_sel_wr);

assign output_vector_V_data_V_1_sel = output_vector_V_data_V_1_sel_rd;

assign output_vector_V_data_V_1_state_cmp_full = ((output_vector_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_vector_V_data_V_1_vld_out = output_vector_V_data_V_1_state[1'd0];

assign output_vector_V_last_V_1_ack_in = output_vector_V_last_V_1_state[1'd1];

assign output_vector_V_last_V_1_ack_out = output_vector_TREADY;

assign output_vector_V_last_V_1_load_A = (output_vector_V_last_V_1_state_cmp_full & ~output_vector_V_last_V_1_sel_wr);

assign output_vector_V_last_V_1_load_B = (output_vector_V_last_V_1_state_cmp_full & output_vector_V_last_V_1_sel_wr);

assign output_vector_V_last_V_1_sel = output_vector_V_last_V_1_sel_rd;

assign output_vector_V_last_V_1_state_cmp_full = ((output_vector_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign output_vector_V_last_V_1_vld_out = output_vector_V_last_V_1_state[1'd0];

assign p_r_M_imag_5_fu_1108_p3 = ((trunc_ln77_fu_1094_p1[0:0] === 1'b1) ? 32'd3212836864 : 32'd0);

assign p_r_M_real_5_fu_1098_p3 = ((trunc_ln77_fu_1094_p1[0:0] === 1'b1) ? 32'd613232946 : 32'd1065353216);

assign packed_data_fu_1229_p3 = {{imag_part_2_fu_1225_p1}, {real_part_2_fu_1221_p1}};

assign real_fu_906_p1 = real_part_fu_892_p1;

assign real_part_2_fu_1221_p1 = FFT_output_M_real_q1;

assign real_part_fu_892_p1 = input_vector_V_data_V_0_data_out[31:0];

assign rev8_address0 = zext_ln60_fu_946_p1;

assign reversed_array_M_im_address1 = zext_ln69_1_fu_1017_p1;

assign reversed_array_M_re_address1 = zext_ln69_1_fu_1017_p1;

assign tmp_1_fu_993_p3 = i6_0_reg_634[32'd3];

assign tmp_2_fu_1029_p3 = i7_0_reg_645[32'd3];

assign trunc_ln67_fu_1007_p1 = i6_0_reg_634[2:0];

assign trunc_ln74_fu_1037_p1 = i7_0_reg_645[2:0];

assign trunc_ln77_fu_1094_p1 = j_0_reg_657[0:0];

assign trunc_ln84_fu_1155_p1 = i8_0_reg_669[1:0];

assign xor_ln84_fu_1143_p2 = (i8_0_reg_669 ^ 3'd4);

assign zext_ln22_fu_824_p1 = phi_ln22_reg_557;

assign zext_ln23_fu_842_p1 = phi_ln23_reg_568;

assign zext_ln24_fu_860_p1 = phi_ln24_reg_579;

assign zext_ln40_fu_916_p1 = i_0_reg_590;

assign zext_ln60_1_fu_951_p1 = rev8_q0;

assign zext_ln60_fu_946_p1 = i3_0_reg_601;

assign zext_ln63_fu_963_p1 = phi_ln63_reg_612;

assign zext_ln64_fu_981_p1 = phi_ln64_reg_623;

assign zext_ln69_1_fu_1017_p1 = or_ln69_fu_1011_p2;

assign zext_ln69_fu_1001_p1 = i6_0_reg_634;

assign zext_ln76_fu_1051_p1 = j_0_reg_657;

assign zext_ln77_1_fu_1082_p1 = add_ln77_fu_1077_p2;

assign zext_ln77_2_fu_1047_p1 = or_ln77_fu_1041_p2;

assign zext_ln77_fu_1125_p1 = add_ln_fu_1118_p3;

assign zext_ln84_1_fu_1149_p1 = xor_ln84_fu_1143_p2;

assign zext_ln84_fu_1191_p1 = i8_0_reg_669;

assign zext_ln90_fu_1209_p1 = i9_0_reg_681;

always @ (posedge ap_clk) begin
    zext_ln60_reg_1281[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln69_reg_1321[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln69_1_reg_1337[0] <= 1'b1;
    zext_ln69_1_reg_1337[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln77_2_reg_1385[1] <= 1'b1;
    zext_ln77_2_reg_1385[3] <= 1'b0;
    zext_ln77_1_reg_1403[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln77_reg_1436[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    zext_ln84_1_reg_1460[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    zext_ln84_reg_1488[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //fft
